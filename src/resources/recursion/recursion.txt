Рекурсия
Перед знакомством с наиболее распространёнными в интернете и программировании структурами данных изучим понятие рекурсии, которое, в частности, будет полезно при обработке любых иерархически организованных данных.
Рекурсией в программировании называется вызов функцией самой себя. Это немного парадоксальное определение основывается на понятии математической индукции, когда процесс вычислений в конечном итоге сводится к простой ситуации, когда можно уже обойтись без рекурсии.

В некотором смысле рекурсия -- одна из наиболее фундаментальных техник решения задач, которая предполагает использование подхода, похожего на математическую индукцию.

Классический пример рекурсии -- это вычисление факториала.
Чтобы перемножить все числа от 1 до N, мы организуем цикл, готовим переменную, хранящую промежуточный результат, инициализируем её единицей, и потом последовательно умножаем на очередное значение счётчика цикла.

Рекурсивная версия функции вычисления факториала с параметром N такова:

если N = 1, то возвращаем 1 в качестве результата;
иначе возвращаем в качестве результата N * факториал(N-1).
Таким образом факториал автоматически разворачивается в цепочку вызовов функций, и как только N-1 становится равным 1, начинается её вычисление. Например, вычисляем факториал от 3:

факториал(3) =
3 * факториал(3-1) =
3 * (2 * факториал(2-1)) =
3 * (2 * 1) =
6
В общем случае с помощью рекурсии можно полностью заменить вычисления с помощью циклов, но главный минус рекурсии, что она работает значительно медленнее, и нередко требует много памяти (для хранения точек возврата в функции).

Рекурсия требует немного иного стиля мышления, нежели в классическом императивном программировании. На рекурсии, по сути, основано функциональное программирование.

Реализуйте с помощью рекурсии:
1. возведение числа N в степень M;
2. вычисление суммы цифр числа;
3. расчёт длины списка, для которого разрешена только одна операция удаления первого элемента pop(0);
4. проверка, является ли строка палиндромом;
5. печать только чётных значений из списка;
6. печать элементов списка с чётными индексами;
7. нахождение второго максимального числа в списке (с учётом, что максимальных может быть несколько, если они равны);
8. поиск всех файлов в заданном каталоге, включая файлы, расположенные в подкаталогах произвольной вложенности.

Для последних заданий подойдёт стандартный шаблон: делаете две функции, одна основная нерекурсивная, которая получает исходные параметры, и вторая рекурсивная, которая вызывается из первой функции со своими начальными параметрами. Это поможет вам избежать лишних параметров или глобальных переменных.

Повышенная сложность (можете погуглить).
Генерация всех корректных сбалансированных комбинаций круглых скобок (параметр -- количество открывающих скобок).
Например,

1 = "()"
2 = "(())" "()()"
Внешне и внутренне несбалансированные комбинации считаются ошибочными:
"()))" ")(()" "(()" -- неверно